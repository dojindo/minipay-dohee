plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
	id "org.sonarqube" version "4.4.1.3373"
}

group = 'com.jindo'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

	// embedded redis
	implementation 'com.github.codemonstur:embedded-redis:1.4.3'

	// redis client
	implementation 'org.redisson:redisson-spring-boot-starter:3.32.0'

	// querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// firebase
	implementation 'com.google.firebase:firebase-admin:9.4.2'

	testImplementation 'io.rest-assured:rest-assured'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

def Qdomains = []
for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
	Qdomains.add(qPattern + '*')
}

def excludePatterns = [
		"**/*Application*",
		"**/config/**",
		"**/exception/**",
		"**/dto/**",
		"**/*Interceptor*",
		"**/*Filter*",
		"**/*Resolver*",
		"**/resources/**",
		"**/annotation/**"
] + Qdomains

// jacoco
jacocoTestReport {
	dependsOn test

	reports {
		html.required = true
		xml.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: excludePatterns)
				})
		)
	}
}

// sonarqube
sonar {
	properties {
		property "sonar.projectKey", "dojindo_minipay-dohee"
		property "sonar.organization", "dojindo"
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.exclusions', excludePatterns.join(',')
		property 'sonar.test.inclusions', '**/*Test*.java'
		property 'sonar.java.coveragePlugin', 'jacoco'
		property 'sonar.coverage.jacoco.xmlReportPaths', "build/reports/jacoco/test/jacocoTestReport.xml"
	}
}

// querydsl
def querydslDir = 'src/main/generated'

tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean {
	delete file(querydslDir)
}